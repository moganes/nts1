buildscript {
	ext {
		springBootVersion = '2.1.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.google.protobuf'

group = 'com.spectrum.notes.notesDataConsumer'
version = '0.0.1'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

sourceSets {
	main {
		proto {
			// In addition to the default 'src/main/proto'
			srcDir 'src/main/proto'
			// In addition to the default '**/*.proto' (use with caution).
			// Using an extension other than 'proto' is NOT recommended,
			// because when proto files are published along with class files, we can
			// only tell the type of a file from its extension.
			include '**/*.protodevel'
		}
		java {
			srcDir 'src/main/java'
		}
	}
	test {
		proto {
			// In addition to the default 'src/test/proto'
			srcDir 'src/test/proto'
		}
	}
}



dependencies {
	implementation('org.springframework.boot:spring-boot-starter')
	implementation('org.springframework.kafka:spring-kafka')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('mysql:mysql-connector-java:8.0.15')
	//implementation('org.postgresql:postgresql:9.4-1206-jdbc42')
	implementation('org.projectlombok:lombok')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('com.google.protobuf:protobuf-java:3.6.1')
	implementation 'com.googlecode.protobuf-java-format:protobuf-java-format:1.4'
	testImplementation('org.springframework.boot:spring-boot-starter-test')
}

protobuf {
	// Configure the protoc executable
	protoc {
		// Download from repositories
		artifact = 'com.google.protobuf:protoc:3.6.1'
	}

	/* plugins {
         grpc {
             artifact = 'io.grpc:protoc-gen-grpc-java:1.15.1'
         }
     }*/

	generateProtoTasks.generatedFilesBaseDir = 'src'
	generateProtoTasks {
		// all() returns the collection of all protoc tasks
		all().each { task ->
			// Here you can configure the task
		}

		// In addition to all(), you may get the task collection by various
		// criteria:

		// (Java only) returns tasks for a sourceSet
		ofSourceSet('main')

	}
}

